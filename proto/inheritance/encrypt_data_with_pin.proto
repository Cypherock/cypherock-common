syntax = "proto3";

import "inheritance/common.proto";
import "error.proto";
import "common.proto";

package inheritance;
/**
 * Example of successful Encryption
 *
 *            Host                                        Device
 *
 *      InitiateRequest            ==>                      *
 *                                                   User confirms
 *
 *             *                   <==             ConfirmationRequest
 *
 *            ------------------data-loop-------------------------
 *         PlainData               ==>                      *
 *             *                   <==             PlainDataAccepted
 *            ------------------loop-end-------------------------
 *
 *   EncryptedDataRequest          ==>                      *
 *                                                Display messages that
 *                                                needs to be verified
 *                                                          *
 *                                                Get pin and card tap to
 *                                                 encrypt the messages
 *                                                          *
 *
 *            ------------------data-loop-------------------------
 *             *                   <==                EncryptedData
 *   EncryptedDataAccepted         ==>                      *
 *            ------------------loop-end-------------------------
 *
 *                                 <==        EncryptedDataCompletedResponse
 */

enum EncryptDataStatus {
  ENCRYPT_DATA_STATUS_INIT = 0;
  ENCRYPT_DATA_STATUS_USER_CONFIRMED = 1;
  ENCRYPT_DATA_STATUS_MESSAGE_VERIFIED = 2;
  ENCRYPT_DATA_STATUS_PIN_ENTERED = 3;
  ENCRYPT_DATA_STATUS_MESSAGE_ENCRYPTED = 4;
}

message EncryptDataWithPinInitiateRequest {
  bytes wallet_id = 1;
  uint32 plain_data_total_size = 2;
}
message EncryptDataWithPinConfirmationResponse {}

message EncryptDataWithPinPlainDataStructure { repeated PlainData data = 1; }
message EncryptDataWithPinPlainData { common.ChunkPayload chunk_payload = 1; }
message EncryptDataWithPinPlainDataAccepted { common.ChunkAck chunk_ack = 1; }

message EncryptDataWithPinEncryptedDataRequest {}

message EncryptDataWithPinEncryptedDataResponse {
  uint32 encrypted_data_size = 1;
}
message EncryptDataWithPinEncryptedDataConfirmationRequest {}

message EncryptDataWithPinEncryptedDataStructure { bytes encrypted_data = 1; }
message EncryptDataWithPinEncryptedData {
  common.ChunkPayload chunk_payload = 1;
}
message EncryptDataWithPinEncryptedDataAccepted {
  common.ChunkAck chunk_ack = 1;
}

message EncryptDataWithPinEncryptedDataCompletedResponse {}

message EncryptDataWithPinRequest {
  oneof request {
    EncryptDataWithPinInitiateRequest initiate = 1;
    EncryptDataWithPinPlainData plain_data = 2;
    EncryptDataWithPinEncryptedDataRequest encrypted_data = 3;
    EncryptDataWithPinEncryptedDataConfirmationRequest confirmation = 4;
    EncryptDataWithPinEncryptedDataAccepted data_accepted = 5;
  }
}

message EncryptDataWithPinResponse {
  oneof response {
    EncryptDataWithPinConfirmationResponse confirmation = 1;
    EncryptDataWithPinPlainDataAccepted data_accepted = 2;
    EncryptDataWithPinEncryptedDataResponse encrypted_data_initiate = 3;
    EncryptDataWithPinEncryptedData encrypted_data = 4;
    EncryptDataWithPinEncryptedDataCompletedResponse completed = 5;

    error.CommonError common_error = 6;
  }
}
