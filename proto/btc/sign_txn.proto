syntax = "proto3";

import "error.proto";
import "common.proto";

package btc;

/**
 * Example where there are 2 inputs and 2 outputs in the txn
 *
 *        Host                       Device
 *
 * SignTxnInitiateRequest  => 
 *                         <= SignTxnConfirmationResponse
 * SignTxnMetadata         =>
 *                         <= SignTxnMetadataAccepted
 *
 *
 * 1st Input
 * SignTxnInputChunk       =>
 *                         <= SignTxnInputChunkAccepted
 *                        ....
 * SignTxnInputChunk       =>
 *                         <= SignTxnInputChunkAccepted
 *
 * 2nd Input
 * SignTxnInputChunk       =>
 *                         <= SignTxnInputChunkAccepted
 *                        ....
 * SignTxnInputChunk       =>
 *                         <= SignTxnInputChunkAccepted
 *
 *
 * SignTxnOutput           =>
 *                         <= SignTxnOutputAccepted
 * SignTxnOutput           =>
 *                         <= SignTxnOutputAccepted
 *
 *
 * **** Device has all transaction information ****
 *
 *
 * SignTxnSignatureRequest =>
 *                         <= SignTxnSignatureResponse
 * SignTxnSignatureRequest =>
 *                         <= SignTxnSignatureResponse
 */

enum SignTxnStatus {
  SIGN_TXN_STATUS_INIT = 0;
  SIGN_TXN_STATUS_CONFIRM = 1;
  SIGN_TXN_STATUS_VERIFY = 2;
  SIGN_TXN_STATUS_SEED_GENERATED = 3;
}

message SignTxnInitiateRequest {
  bytes wallet_id = 1;
  repeated uint32 derivation_path = 2;
}

message SignTxnConfirmationResponse {
}

message SignTxnMetadata {
  // transaction output UTXO fields
  uint32 version = 1;
  uint32 input_count = 2;
  uint32 output_count = 3;
  uint32 locktime = 4;
  uint32 sighash = 5;
}

message SignTxnMetadataAccepted {
}

message SignTxnInputChunk {
  common.ChunkPayload chunk_payload = 1;
}

message SignTxnInputChunkAccepted {
  common.ChunkAck chunk_ack = 1;
}

message SignTxnInput {
  bytes prev_txn = 1;
  bytes prev_txn_hash = 2;

  uint32 prev_output_index = 3;
  uint64 value = 4;
  bytes script_pub_key = 5;
  uint32 sequence = 6;

  uint32 change_index = 7;
  uint32 address_index = 8;
}

message SignTxnOutputAccepted {
}

message SignTxnOutput {
  // transaction output UTXO fields
  int64 value = 1;
  bytes script_pub_key = 2;

  bool is_change = 3;
  // output change address index that should be checked on the HW device
  optional uint32 changes_index = 4;
}

message SignTxnVerifiedResponse {
}

message SignTxnSignatureRequest {
  uint32 index = 1;
}

message SignTxnSignatureResponse {
  bytes signature = 1;
}

message SignTxnRequest {
  reserved 3;

  oneof request {
    SignTxnInitiateRequest initiate = 1;
    SignTxnMetadata meta = 2;
    SignTxnInputChunk input = 6;
    SignTxnOutput output = 4;
    SignTxnSignatureRequest signature = 5;
  }
}

message SignTxnResponse {
  reserved 3;
  
  oneof response {
    SignTxnConfirmationResponse confirmation = 1;
    SignTxnMetadataAccepted meta_accepted = 2;
    SignTxnInputChunkAccepted input_accepted = 7;
    SignTxnOutputAccepted output_accepted = 4;
    SignTxnSignatureResponse signature = 5;

    error.CommonError common_error = 6;
  }
}
